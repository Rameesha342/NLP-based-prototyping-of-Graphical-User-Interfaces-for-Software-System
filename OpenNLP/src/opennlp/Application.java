
package opennlp;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;


public class Application extends javax.swing.JFrame {

    //file chooser to select text file
   
   private JFileChooser fileChooser = new JFileChooser();
    private File myFile;
    private Scanner scanFile;
    
    private int mouseX,mouseY;
    //add text written on jtextArea,(KeyRealesed event)
   private static String text="";
    //method to read all text from text file 
    public String SentenceReader() {
        String sentence = "";
        try {
            scanFile = new Scanner(myFile);
            while (scanFile.hasNextLine()) {
                sentence += scanFile.nextLine();
            }
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Please select a file ");
        }
        return sentence;
    }

    //method to clear text area
    private void Clear() {
        jTextArea1.setText("");
    }

    //constructor
 
    public Application() {
        initComponents();
        
    }
       //method to open file explorer/chooser to select file
    private void OpenFile() {
        fileChooser = new JFileChooser();
        //filter to show only text files
        FileFilter filter = new FileNameExtensionFilter("Files", "txt");
        fileChooser.setFileFilter(filter);
        //open fileChooser,get result select or cancel
        int returnValue = fileChooser.showOpenDialog(this);

        //if select/Approve option 
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            //getting selected file 
            myFile = fileChooser.getSelectedFile();
           String fName = myFile.getName();
            //displaying name of the file 
            jLabel1.setText(fName);
        }
    }
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Header_Panel = new javax.swing.JPanel();
        open_btn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Body_panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Footer_panel = new javax.swing.JPanel();
        tokens_btn = new javax.swing.JButton();
        tags_btn = new javax.swing.JButton();
        GUI_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        Header_Panel.setBackground(new java.awt.Color(97, 97, 97));

        open_btn.setBackground(new java.awt.Color(33, 33, 33));
        open_btn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        open_btn.setForeground(new java.awt.Color(255, 255, 255));
        open_btn.setText("Open File");
        open_btn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white));
        open_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_btnOpenFileButton(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8_minus_32px_1.png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/full_screen_32px.png"))); // NOI18N
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/delete_32px.png"))); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout Header_PanelLayout = new javax.swing.GroupLayout(Header_Panel);
        Header_Panel.setLayout(Header_PanelLayout);
        Header_PanelLayout.setHorizontalGroup(
            Header_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Header_PanelLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(open_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addGap(34, 34, 34)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addGap(119, 119, 119)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        Header_PanelLayout.setVerticalGroup(
            Header_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Header_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Header_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Header_PanelLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(Header_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(open_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        Body_panel.setBackground(new java.awt.Color(97, 97, 97));

        jTextArea1.setBackground(new java.awt.Color(224, 224, 224));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1TextAreaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea1TextAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout Body_panelLayout = new javax.swing.GroupLayout(Body_panel);
        Body_panel.setLayout(Body_panelLayout);
        Body_panelLayout.setHorizontalGroup(
            Body_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(Body_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Body_panelLayout.createSequentialGroup()
                    .addGap(80, 80, 80)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addGap(80, 80, 80)))
        );
        Body_panelLayout.setVerticalGroup(
            Body_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 432, Short.MAX_VALUE)
            .addGroup(Body_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Body_panelLayout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );

        Footer_panel.setBackground(new java.awt.Color(97, 97, 97));
        Footer_panel.setPreferredSize(new java.awt.Dimension(0, 100));

        tokens_btn.setBackground(new java.awt.Color(33, 33, 33));
        tokens_btn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        tokens_btn.setForeground(new java.awt.Color(255, 255, 255));
        tokens_btn.setText("Tokens");
        tokens_btn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white));
        tokens_btn.setFocusCycleRoot(true);
        tokens_btn.setFocusTraversalPolicyProvider(true);
        tokens_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tokens_btnTokenButton(evt);
            }
        });

        tags_btn.setBackground(new java.awt.Color(33, 33, 33));
        tags_btn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        tags_btn.setForeground(new java.awt.Color(255, 255, 255));
        tags_btn.setText("Tags");
        tags_btn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white));
        tags_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tags_btnPOSTagsButton(evt);
            }
        });

        GUI_btn.setBackground(new java.awt.Color(33, 33, 33));
        GUI_btn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        GUI_btn.setForeground(new java.awt.Color(255, 255, 255));
        GUI_btn.setText("GUI");
        GUI_btn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white));
        GUI_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GUI_btnGUIButton(evt);
            }
        });

        javax.swing.GroupLayout Footer_panelLayout = new javax.swing.GroupLayout(Footer_panel);
        Footer_panel.setLayout(Footer_panelLayout);
        Footer_panelLayout.setHorizontalGroup(
            Footer_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(Footer_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Footer_panelLayout.createSequentialGroup()
                    .addGap(89, 89, 89)
                    .addComponent(tokens_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addGap(77, 77, 77)
                    .addComponent(tags_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addGap(95, 95, 95)
                    .addComponent(GUI_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addGap(89, 89, 89)))
        );
        Footer_panelLayout.setVerticalGroup(
            Footer_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
            .addGroup(Footer_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Footer_panelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(Footer_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tokens_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tags_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(GUI_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Header_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Body_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Footer_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Header_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(Body_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(Footer_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(800, 600));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void open_btnOpenFileButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_btnOpenFileButton
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            fileChooser.updateUI(); //Create UI objects
            
        } catch (Exception ex)
        {
            System.out.println(ex);
        }

        //clear text area
        Clear();
        //open file chooser by calling method
        OpenFile();
    }//GEN-LAST:event_open_btnOpenFileButton

    private void tokens_btnTokenButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tokens_btnTokenButton
        //if label is not empty,there is selected file
        if(!jLabel1.getText().equals("")){
            //clearing the jtext area
            Clear();
            //getting text by calling method
            String sentence = SentenceReader();
            //there are checked exception for I/O
            try {
                Tokens( sentence, jTextArea1);
            } catch (IOException ex) {
                Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //if both are empty, means there is no file no text written in text area
        else if(jLabel1.getText().equals("")&&jTextArea1.getText().equals(""))
        JOptionPane.showMessageDialog(this, "Please select a file or write text in text area ");
        //if label is empty means there is no file selected yet
        else{
            //text contain the text got from text area(JtextArea KeyRealeased event)
            String sentence = text;
            //there are checked exception for I/O
            try {
                Tokens( sentence, jTextArea1);
            } catch (IOException ex) {
                Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tokens_btnTokenButton

    private void tags_btnPOSTagsButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tags_btnPOSTagsButton
        //if label is not empty,there is selected file
        if(!jLabel1.getText().equals(""))
        {
            //clearing the text area
            Clear();
            //getting text by calling method
            String sentence = SentenceReader();
            //there are checked exception for I/O
            try {
                POS_Tags( sentence, jTextArea1);
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
        //if both are empty, means there is no file no text written in text area
        else if(jLabel1.getText().equals("")&&jTextArea1.getText().equals(""))
        JOptionPane.showMessageDialog(this, "Please select a file or write some text in the text area ");
        //if label is empty means there is no file selected yet
        else
        {
            //text contain the text got from text area(JtextArea KeyRealeased event)
            String sentence = text;
            //there are checked exception for I/O
            try {
                POS_Tags(sentence, jTextArea1);
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_tags_btnPOSTagsButton

    private void GUI_btnGUIButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GUI_btnGUIButton
        //if label is not empty,there is selected file
        if(!jLabel1.getText().equals(""))
        {
            //clearing the text area
            Clear();
            //getting text by calling method
            String sentence = SentenceReader();
            //there are checked exception for I/O
            try {
                GUI_Rules(sentence, jTextArea1);
            } catch (IOException e) {
                System.out.println(e);
            }
        }
        //if both are empty, means there is no file no text written in text area
        else if(jLabel1.getText().equals("")&&jTextArea1.getText().equals(""))
        JOptionPane.showMessageDialog(this, "Please select a file or write text in text area ");
        //if label is empty means there is no file selected yet
        else
        {
            //text contain the text got from text area (JtextArea KeyRealeased event)
            String sentence =text;
            //there are checked exception for I/O
            try {
                GUI_Rules(sentence, jTextArea1);
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_GUI_btnGUIButton

    private void jTextArea1TextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1TextAreaKeyReleased
        //getting typed text on textarea in text
        text=jTextArea1.getText();
    }//GEN-LAST:event_jTextArea1TextAreaKeyReleased

    private void jTextArea1TextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1TextAreaKeyPressed
        //whenever we start writing on text area,the file will be removed
        jLabel1.setText("");
    }//GEN-LAST:event_jTextArea1TextAreaKeyPressed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
       int temp=JOptionPane.showConfirmDialog(this, "Are you sure?","Select",JOptionPane.YES_NO_OPTION);
        if (temp==0) {
         System.exit(0);   
        }
  
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        if (this.getExtendedState()!=Application.MAXIMIZED_BOTH) {
            this.setExtendedState(Application.MAXIMIZED_BOTH);
        }
        else
            this.setExtendedState(Application.NORMAL);
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        this.setExtendedState(Application.ICONIFIED);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        mouseX=evt.getX();
        mouseY=evt.getY();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        //NewJFrame.setLocation(Application.getX()+Application.getY()-mouseX,Application.getX()+Application.getY()-mouseY);
       int x=evt.getXOnScreen();
       int  y=evt.getYOnScreen();
       this.setLocation(x-mouseX, y-mouseY);
    }//GEN-LAST:event_formMouseDragged

     //method to generate tokens
static void Tokens(String sentence,JTextArea textArea) throws IOException
{   
    String[] tags=null;//to store pos tags
    String[] tokens=null;//to store tokens 
    //variabel to store text after spliting 
        String Text = "";
    //spliting/removing all commas,inverted commas and paranthesis from sentences
       String[] CS = sentence.split("[,|\"|(|)]");//
        for (String CS1 : CS)
        {
            Text  += CS1;
        }        
          //Detecting the sentences 
        String sentences[] = NLP.DETECTOR().sentDetect(Text);  
         //iterating the sentences 
        for (String sent : sentences) 
        {
            //Tokenizing the given sentence(sentence by sentence) 
            tokens = NLP.TOKENIZER().tokenize(sent);
        }
            //appending tokens + pos tags
            for (String temp : tokens) 
            {
                //System.out.println(temp);
                textArea.append(temp+"\n");
            }
        
}
//method to generate POS taggs
 static void POS_Tags(String sentence,JTextArea textArea) throws IOException
{
    String[] tags=null;//to store pos tags
    String[] tokens=null;//to store tokens 
    String Text = "";
    
    //spliting/removing all commas,inverted commas and paranthesis from sentences
       String[] CS = sentence.split("[,|\"|(|)]");//CS stands for comma seprated
        for (String CS1 : CS) 
        {
            Text += CS1;
        }
          //Detecting the sentences 
        String sentences[] = NLP.DETECTOR().sentDetect(Text);
              //iterating the sentences 
        for (String sent : sentences) 
        {
            //Tokenizing the given sentence(sentence by sentence) 
          tokens = NLP.TOKENIZER().tokenize(sent);
         
            //Generating pos tags on every token
            tags = NLP.POSTAGER().tag(tokens);
        }    
            //appending tokens + pos tags to text area
            for (int i = 0; i < tags.length; i++) 
            {
                    String temp=tokens[i]+" = "+tags[i];
                    textArea.append(temp+"\n");                
            }
           
}
 //method to generate GUI Rules
static void GUI_Rules(String sentence,JTextArea textArea) throws IOException
{   
        ArrayList<String> textfields = new ArrayList<>();//to store number of textfields
        ArrayList<String> labelsName = new ArrayList<>();//to store name and number of all labels
        ArrayList<String> buttonsName= new ArrayList<>();//to store name and number of all buttons
        ArrayList<String> tables     = new ArrayList<>();//to store number of tables
        ArrayList<String> radioButtonsName=new ArrayList<>();//to store name and number of radio buttons
        ArrayList<String> comboBox    =new ArrayList<>();//to store number of combo boxes
        String[] tags=null;//to store pos tags
        String[] tokens=null;//to store tokens 
       String Text = "";
        //spliting/removing all commas,inverted commas and paranthesis from sentences
       String[] CS = sentence.split("[,|\"|(|)]");
        for (String CS1 : CS) {
            Text += CS1;
        }
          //Detecting the sentences
          //DETECTOR is a static method from NLP class(Contains)
        String sentences[] = NLP.DETECTOR().sentDetect(Text);
           
            //Printing the sentences 
        for (String sent : sentences) 
        {
            //Tokenizing the given sentence(sentence by sentence) 
            tokens = NLP.TOKENIZER().tokenize(sent);

            //Generating pos tags on every token
            tags = NLP.POSTAGER().tag(tokens);
        }
            //Rules
            try {   
            for (int i = 0; i < tags.length; i++){
                //Verb(VB)+Adjective(JJ)+Noun(NN)=Adjective+Noun will be textfiled with label
                 if(tags[i].equals("VB")&&tags[i+1].equals("JJ")&&tags[i+2].equals("NN"))
                {
                    textfields.add(tags[i+1]);
                    labelsName.add(tokens[i+1]+" "+tokens[i+2]);
                }
                 //Noun(NN)+Cordinating Conjunction(CC)+Noun(NN)=both Nouns(NN) will be textbox
                else if(tags[i].equals("NN")&&tags[i + 1].equals("CC")&&tags[i + 2].equals("NN"))
                {
                        textfields.add(tags[i ]);
                        textfields.add(tags[i + 2]);
                        labelsName.add(tokens[i]);
                        labelsName.add(tokens[i+2]);
                }     
                //Verb(VB)+Determiner(DT)+Gerund,verb(VBG)=Determiner(DT) will be a button
                else if(tags[i].equals("VB")&&tags[i + 1].equals("DT")&&tags[i + 2].equals("VBG"))
                {
                    buttonsName.add(tokens[i+1]);
                }
                
                //Verb(VB)+Noun(NN)+Coordinating conjunction(CC)+Gerund Verb(VBG)=Noun(NN)+Gerund Verb(VBG) will be abutton
                else if(tags[i].equals("VB")&&tags[i+1].equals("NN")&&tags[i+2].equals("CC")&&tags[i+3].equals("VBG"))
                {
                    buttonsName.add(tokens[i+1]);
                    buttonsName.add(tokens[i+3]);
                }
                //Adjective(JJ)+TO(TO)+Verb(VB)=Verb(VB) will be a button
                else if(tags[i].equals("JJ")&&tags[i+1].equals("TO")&&tags[i+2].equals("VB"))
                {
                    buttonsName.add(tokens[i+2]);
                }
                //Noun, plural(NNS)+Proper noun(NNP)+Noun(NN)=Proper noun, singular(NNP)+Noun(NN) becomes text filed and label
                else if(tags[i].equals("NNS")&& tags[i+1].equals("NNP")&&tags[i+2].equals("NN"))
                {
                    textfields.add(tags[i + 1]);
                    textfields.add(tags[i + 2]);
                    labelsName.add(tokens[i+1]);
                    labelsName.add(tokens[i+2]);
                }
                //Noun(NN)+TO+Verb(VB)=verb(VB) will be a button
                else if(tags[i].equals("NN")&&tags[i+1].equals("TO")&&tags[i+2].equals("VB"))
                {
                    buttonsName.add(tokens[i+2]);
                }
                
                //Noun(NN)+To+Adjective(JJ)=Adjective will be a button
                else if(tags[i].equals("NN")&&tags[i+1].equals("TO")&&tags[i+2].equals("JJ"))
                {
                    buttonsName.add(tokens[i+2]);
                }
                //Verb(VB)+Determiner(DT) or Predeterminer(PDT)+Determiner(DT)= there will be a table
                else if(tags[i].equals("VB")&&(tags[i+1].equals("DT")||tags[i+1].equals("PDT"))&&tags[i+2].equals("DT")){
                    tables.add(tags[i]);
                }
                //Gerund (VBG)+Proper Noun(NNP)+Proper Noun(NNP)+Noun(NN)=Proper Noun(NNP)+Proper Noun(NNP) will be a button
                else if(tags[i].equals("VBG")&&tags[i+1].equals("NNP")&&tags[i+2].equals("NNP")&&tags[i+3].equals("NN")){
                 buttonsName.add(tokens[i+1]+" "+tokens[i+2]);
                }
                //Verb(VB)+Noun(NN)+Noun(NN)=Noun(NN)+Noun(NN) will be a button
                else if(tags[i].equals("VB")&&tags[i+1].equals("NN")&&tags[i+2].equals("NN")){
                    buttonsName.add(tokens[i+1]+" "+tokens[i+2]);
                }
                //Noun(NN)+Cordinating Conjunction(CC)+preposition or conjunction(IN)+Noun(NN)=Noun(NN)+Noun(NN) will be two radio buttons
                else if(tags[i].equals("NN")&&tags[i+1].equals("CC")&&tags[i+2].equals("IN")&&tags[i+3].equals("NN")){
                    radioButtonsName.add(tokens[i]);
                    radioButtonsName.add(tokens[i+3]);
                }
                //Verb(VB) or (VBN)+Proper Noun(NNP)+Proper Noun(NNP)=Proper Noun(NNP)+Proper Noun(NNP) will be a button
                else if((tags[i].equals("VB")||tags[i].equals("VBN"))&&tags[i+1].equals("NNP")&&tags[i+2].equals("NNP")){
                    buttonsName.add(tokens[i+1]+" "+tokens[i+2]);
                }
                 //Verb(VBZ)+Preposition(IN)+Proper Noun(NNP)=Proper Noun(NNP)+Proper Noun(NNP) will be a button
                else if(tags[i].equals("VBZ")&&tags[i+1].equals("IN")&&tags[i+2].equals("NNP")&&tags[i+3].equals("NNP")){
                    buttonsName.add(tokens[i+2]+" "+tokens[i+3]);
                }
                //Noun(NN)+preposition or conjunction(IN)+Determenent(DT)+Noun(NNS)=Noun(NNS) will be a combo box
                else if(tags[i].equals("NN")&&tags[i+1].equals("IN")&&tags[i+2].equals("DT")&&tags[i+3].equals("NNS")){
                    comboBox.add(tags[i+3]);
                }
                //Noun(NN)+TO+Noun(NN)=Noun(NN) will be a button
                else if(tags[i].equals("NN")&&tags[i+1].equals("TO")&&tags[i+2].equals("NN"))
                {
                    buttonsName.add(tokens[i+2]);
                }
                //Verb(VB)+Cordinating Conjunction(CC)+Verb(VB)=Verb(VB) will be a button
                 else if(tags[i].equals("VB")&&tags[i+1].equals("CC")&&tags[i+2].equals("VB"))
                {
                    buttonsName.add(tokens[i+2]);
                }
                 //Verb(VB)+Determiner(DT)+Noun(NN)+Noun(NN)=Noun(NN)+Noun(NN) will be textfield and label
                 else if(tags[i].equals("VB")&&tags[i+1].equals("DT")&&tags[i+2].equals("NN")&&tags[i+3].equals("NN")){
                  textfields.add(tags[i+2]);
                  labelsName.add(tokens[i+2]+" "+tokens[i+3]);
                 }
            }
             
            //calling GUI to build frame
            new GUI(textfields.size(),tables.size(),comboBox.size(),labelsName,buttonsName,radioButtonsName);  

            } 
            /*catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, """
                                                There is an Array index out of Bounds exception.
                                                Please modify the last sentence
                                                 """);
            }*/
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "There is Array index out of Bounds exception.\n"
                        + "Please modify the last sentence");
            }
}
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Application().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Body_panel;
    private javax.swing.JPanel Footer_panel;
    private javax.swing.JButton GUI_btn;
    private javax.swing.JPanel Header_Panel;
    public javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton open_btn;
    private javax.swing.JButton tags_btn;
    private javax.swing.JButton tokens_btn;
    // End of variables declaration//GEN-END:variables
}
